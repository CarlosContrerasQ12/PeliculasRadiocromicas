#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Sat Nov 28 12:15:09 2020
#

import wx
from claseCalibracion import *
from panelMapaDosis2 import *
from imagenMatplotlibLibre import *
from interfazFinal import ImagenCuadernoMatplotlib
import matplotlib as mpl
import matplotlib.pyplot as plt
from scipy.ndimage import rotate

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PanelMapaDosis1(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        self.parent=args[0]
        self.rutaCalibracion=args[1]
        super(PanelMapaDosis1, self).__init__(self.parent)
        
        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.button_N = wx.Button(self, wx.ID_ANY, "N", style=wx.BU_EXACTFIT)
        self.text_ctrl_N = wx.TextCtrl(self, wx.ID_ANY, "",style=wx.TE_READONLY)
        self.panel_5 = wx.Panel(self, wx.ID_ANY)
        self.button_W = wx.Button(self, wx.ID_ANY, "W", style=wx.BU_EXACTFIT)
        self.text_ctrl_W = wx.TextCtrl(self, wx.ID_ANY, "",style=wx.TE_READONLY)
        self.button_E = wx.Button(self, wx.ID_ANY, "E", style=wx.BU_EXACTFIT)
        self.text_ctrl_E = wx.TextCtrl(self, wx.ID_ANY, "",style=wx.TE_READONLY)
        self.panel_6 = wx.Panel(self, wx.ID_ANY)
        self.button_S = wx.Button(self, wx.ID_ANY, "S", style=wx.BU_EXACTFIT)
        self.text_ctrl_S = wx.TextCtrl(self, wx.ID_ANY, "",style=wx.TE_READONLY)
        self.panel_7 = wx.Panel(self, wx.ID_ANY)
        self.btnRemoverMarca = wx.Button(self, wx.ID_ANY, "Remover marca")
        self.btnSeleccionROI = wx.Button(self, wx.ID_ANY, "Seleccionar ROI")
        self.btnGenerarMapa = wx.Button(self, wx.ID_ANY, "Generar Mapa")
        self.checkRotar=wx.CheckBox(self,wx.ID_ANY,"Rotar")
        
        self.dimensionesIniciales=self.parent.arayActual.shape
        self.centro=(int(self.parent.arayActual.shape[0]/2),int(self.parent.arayActual.shape[1]/2))
        self.puntoN=None
        self.puntoW=None
        self.puntoE=None
        self.puntoS=None

        self.__set_properties()
        self.__do_layout()
        
        self.Bind(wx.EVT_BUTTON, self.elegirN, self.button_N)
        self.Bind(wx.EVT_BUTTON, self.elegirW, self.button_W)
        self.Bind(wx.EVT_BUTTON, self.elegirE, self.button_E)
        self.Bind(wx.EVT_BUTTON, self.elegirS, self.button_S)
        self.Bind(wx.EVT_BUTTON, self.removerMarca, self.btnRemoverMarca)
        self.Bind(wx.EVT_BUTTON, self.seleccionarROI, self.btnSeleccionROI)
        self.Bind(wx.EVT_BUTTON, self.generarMapa, self.btnGenerarMapa)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(3, 4, 0, 0)
        labelPuntosFiduciales = wx.StaticText(self, wx.ID_ANY, "Puntos fiduciales")
        sizer_3.Add(labelPuntosFiduciales, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_3.Add(self.checkRotar, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(sizer_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.panel_4, 0, 0, 0)
        grid_sizer_1.Add(self.button_N, 1, wx.ALIGN_RIGHT | wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_N, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_5, 0, wx.SHAPED, 0)
        grid_sizer_1.Add(self.button_W, 1, wx.ALIGN_RIGHT | wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_W, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_E, 1, wx.ALIGN_RIGHT | wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_E, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_6, 0, 0, 0)
        grid_sizer_1.Add(self.button_S, 1, wx.ALIGN_RIGHT | wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_S, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_7, 0, wx.SHAPED, 0)
        sizer_2.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_1.Add(self.btnRemoverMarca, 1, wx.ALL | wx.EXPAND, 0)
        sizer_1.Add(self.btnSeleccionROI, 1, wx.EXPAND, 0)
        sizer_1.Add(self.btnGenerarMapa, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.FitInside(self)
        self.Layout()
        # end wxGlade
        
    def elegirN(self,event):
        k=self.parent.paginaActual.gin1()
        self.puntoN=[int(k[0][0]),int(k[0][1])]
        self.text_ctrl_N.SetValue(str(self.puntoN[0])+';'+str(self.puntoN[1]))
        event.Skip()
        
    def elegirW(self,event):
        k=self.parent.paginaActual.gin1()
        self.puntoW=[int(k[0][0]),int(k[0][1])]
        self.text_ctrl_W.SetValue(str(self.puntoW[0])+';'+str(self.puntoW[1]))
        event.Skip()
        
    def elegirE(self,event):
        k=self.parent.paginaActual.gin1()
        self.puntoE=[int(k[0][0]),int(k[0][1])]
        self.text_ctrl_E.SetValue(str(self.puntoE[0])+';'+str(self.puntoE[1]))
        event.Skip()
        
    def elegirS(self,event):
        k=self.parent.paginaActual.gin1()
        self.puntoS=[int(k[0][0]),int(k[0][1])]
        self.text_ctrl_S.SetValue(str(self.puntoS[0])+';'+str(self.puntoS[1]))
        event.Skip()
        
        
    def removerMarca(self, event):  # wxGlade: MyDialog.<event_handler>
        k=self.parent.paginaActual.gin1()
        y=int(k[0][0])
        x=int(k[0][1])
        
        self.parent.arayActual[x:x+3,y:y+3,0]=int(np.mean(self.parent.arayActual[x+3:x+6,y+3:y+6,0]))
        self.parent.arayActual[x:x+3,y:y+3,1]=int(np.mean(self.parent.arayActual[x+3:x+6,y+3:y+6,1]))
        self.parent.arayActual[x:x+3,y:y+3,2]=int(np.mean(self.parent.arayActual[x+3:x+6,y+3:y+6,2]))
        
        self.parent.arayActual[x-3:x,y:y+3,0]=int(np.mean(self.parent.arayActual[x-6:x-3,y+3:y+6,0]))
        self.parent.arayActual[x-3:x,y:y+3,1]=int(np.mean(self.parent.arayActual[x-6:x-3,y+3:y+6,1]))
        self.parent.arayActual[x-3:x,y:y+3,2]=int(np.mean(self.parent.arayActual[x-6:x-3,y+3:y+6,2]))
        
        self.parent.arayActual[x-3:x,y-3:y,0]=int(np.mean(self.parent.arayActual[x-6:x-3,y-6:y-3,0]))
        self.parent.arayActual[x-3:x,y-3:y,1]=int(np.mean(self.parent.arayActual[x-6:x-3,y-6:y-3,1]))
        self.parent.arayActual[x-3:x,y-3:y,2]=int(np.mean(self.parent.arayActual[x-6:x-3,y-6:y-3,2]))
        
        self.parent.arayActual[x:x+3,y-3:y,0]=int(np.mean(self.parent.arayActual[x+3:x+6,y-6:y-3,0]))
        self.parent.arayActual[x:x+3,y-3:y,1]=int(np.mean(self.parent.arayActual[x+3:x+6,y-6:y-3,1]))
        self.parent.arayActual[x:x+3,y-3:y,2]=int(np.mean(self.parent.arayActual[x+3:x+6,y-6:y-3,2]))
        
        self.parent.paginaActual.axA.clear()
        escalado=(self.parent.arayActual/2**self.parent.configuracion["BitCanal"])*255
        self.parent.paginaActual.axA.imshow(escalado.astype(int))
        self.parent.paginaActual.figure.canvas.draw()
        self.parent.paginaActual.figure.canvas.flush_events()  
        event.Skip()

    def seleccionarROI(self, event):  # wxGlade: MyDialog.<event_handler>
        k=self.parent.paginaActual.gin2()
        x1=k[0][0]
        y1=k[0][1]
        x2=k[1][0]
        y2=k[1][1]
        
        self.parent.arayActual=self.parent.arayActual[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:]
        self.parent.araySinIrra=self.parent.araySinIrra[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:]
        self.parent.araySinLuz=self.parent.araySinLuz[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:]
        
        self.parent.paginaActual.axA.clear()
        escalado=(self.parent.arayActual/2**self.parent.configuracion["BitCanal"])*255
        self.parent.paginaActual.axA.imshow(escalado.astype(int))
        self.parent.paginaActual.figure.canvas.draw()
        self.parent.paginaActual.figure.canvas.flush_events()   
        
        if(self.puntoN!=None):
            self.puntoN[0]=self.puntoN[0]-min(int(x1),int(x2))
            self.puntoN[1]=self.puntoN[1]-min(int(y1),int(y2))
            self.text_ctrl_N.SetValue(str(self.puntoN[0])+';'+str(self.puntoN[1]))
        if(self.puntoW!=None):
            self.puntoW[0]=self.puntoW[0]-min(int(x1),int(x2))
            self.puntoW[1]=self.puntoW[1]-min(int(y1),int(y2))
            self.text_ctrl_W.SetValue(str(self.puntoW[0])+';'+str(self.puntoW[1]))
        if(self.puntoE!=None):
            self.puntoE[0]=self.puntoE[0]-min(int(x1),int(x2))
            self.puntoE[1]=self.puntoE[1]-min(int(y1),int(y2))
            self.text_ctrl_E.SetValue(str(self.puntoE[0])+';'+str(self.puntoE[1]))
        if(self.puntoS!=None):
            self.puntoS[0]=self.puntoS[0]-min(int(x1),int(x2))
            self.puntoS[1]=self.puntoS[1]-min(int(y1),int(y2))
            self.text_ctrl_S.SetValue(str(self.puntoS[0])+';'+str(self.puntoS[1]))
                
        event.Skip()
        
    def generarMapa(self,event):
        
        datosCalib=leer_Calibracion(self.rutaCalibracion)
        trans=datosCalib["funcionTaD"]
        
        oDimage=0
        if datosCalib["TipoCanal"]=="Canal solo":
            oDimage= np.log10(self.parent.araySinIrra/self.parent.arayActual)
        else:
            oDimage=(self.parent.arayActual+self.parent.araySinIrra)/((2**self.parent.configuracion["BitCanal"])-1)

            
        rez=self.parent.arbolArchivos.AppendItem(self.parent.raiz,"Mapa de dosis "+str(len(self.parent.mapasDeDosis)+1))
        self.parent.arbolArchivos.AppendItem(rez,"Imagen")
        

        mapaDosis=0
        
        if datosCalib["TipoCanal"]=="Canal solo":
            rojo=oDimage[:,:,0]
            verde=oDimage[:,:,1]
            azul=oDimage[:,:,2]
            mapaDosis=trans(rojo,verde,azul)

        else:
            rojo=oDimage[:,:,0]
            verde=oDimage[:,:,1]
            azul=oDimage[:,:,2]
            deltas=datosCalib["funcionCalDel"](rojo,verde,azul)
            mapaDosis=trans(deltas,rojo,verde,azul)
            imaDelta=ImagenMatplotlibLibre(None)
            ins=np.where(deltas<0.7)
            deltas[ins]=1
            ins=np.where(np.isnan(deltas))
            deltas[ins]=1
            ins=np.where(deltas>10)
            deltas[ins]=1
            imaDelta.arr=deltas
            imaDelta.ax.imshow(deltas/np.mean(deltas),cmap=mpl.cm.gray)
            imaDelta.Show()
        

        ins=np.where(mapaDosis<0)
        mapaDosis[ins]=0
        ins=np.where(mapaDosis>10)
        mapaDosis[ins]=0
        
        self.centro=(int(self.parent.arayActual.shape[0]/2),int(self.parent.arayActual.shape[1]/2))
        if self.puntoN!=None and self.puntoW!=None and self.puntoE!=None and self.puntoS!=None:
            coefhor = np.polyfit([self.puntoW[0],self.puntoE[0]],[self.puntoW[1],self.puntoE[1]], 1)
            if self.puntoN[0]!=self.puntoS[0]:
                coefver = np.polyfit([self.puntoN[0],self.puntoS[0]],[self.puntoN[1],self.puntoS[1]], 1)
                y=(coefhor[1]*coefver[0]-coefhor[0]*coefver[1])/(coefver[0]-coefhor[0])
                x=(y-coefhor[1])/coefhor[0]
                print(x)
                print(y)
                self.centro=(int(y),int(x))
            else:
                x=self.puntoN[0]
                y=coefhor[0]*x+coefhor[1]
                self.centro=(int(x),int(y))
            if self.checkRotar.GetValue():    
                angulo=np.arctan(coefhor[0])*180/np.pi
                mapaDosis=rotate(mapaDosis,angulo,order=4,mode='nearest')

        
        self.parent.arayActual=mapaDosis
        self.parent.paginas.append(ImagenCuadernoMatplotlib(self.parent.notebookImagenes))
        self.parent.notebookImagenes.AddPage(self.parent.paginas[-1], "Mapa de dosis "+str(len(self.parent.mapasDeDosis)+1))
        self.parent.numeroPags=self.parent.numeroPags+1
        self.parent.paginas[-1].identificador=self.parent.numeroPags
        self.parent.paginas[-1].tipo='md2'

        figActual=self.parent.paginas[-1].figure
        self.parent.paginaActual=self.parent.paginas[-1]
        a1=figActual.gca()
        self.parent.paginas[-1].arrayIma=self.parent.arayActual
        
        a1.imshow(mapaDosis[:,:,0],cmap=mpl.cm.gray)
        self.parent.arbolArchivos.AppendItem(rez,"Mapa de dosis")
        panelVariable=PanelMapaDosis2(self.parent,self.centro)
        self.parent.panelesVariables[-1].Hide()
        self.parent.panelesVariables.append(panelVariable)
        self.parent.paginas[-1].panel=panelVariable
        self.parent.sizerPanel=self.parent.sizer_2.Add(self.parent.panelesVariables[-1], 1, wx.EXPAND, 0)
        self.parent.panelesVariables[-1].Show()
        self.parent.Layout()
        nuem=self.parent.notebookImagenes.GetPageCount()-1
        self.parent.notebookImagenes.SetSelection(nuem)
        event.Skip()

# end of class MyDialog

class MyApp(wx.App):
    def OnInit(self):
        self.dialog = MyDialog(None, wx.ID_ANY, "")
        self.SetTopWindow(self.dialog)
        self.dialog.ShowModal()
        self.dialog.Destroy()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
