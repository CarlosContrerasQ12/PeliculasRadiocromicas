#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Thu Nov 12 23:01:15 2020
#

import numpy as np
import wx
import wx.lib.agw.aui as aui
import wx.lib.mixins.inspection as wit

from dialogoCalibracionAlternativo import DialogoCalibracion
from dialogoSeleccionDosis import *
from claseCalibracion import *
from claseDialogoBackground import *
from panelSeleccionDosis import *

import matplotlib as mpl
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar

import tifffile as tiff

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

def leerDosis(nombre_archivo):
    dosis=np.genfromtxt(nombre_archivo)
    return dosis.tolist()
    
class Calibracion():
    def __init__(self,figuras,nombresArchivos,panelDosis):
        self.panelesMatplot=figuras
        self.nombresArchivos=nombresArchivos
        self.panelDosis=panelDosis
        self.fondoCero=[]
        self.fondoNegro=[]


class ImagenCuadernoMatplotlib(wx.Panel):
    def __init__(self, parent, id=-1, dpi=None, **kwargs):
        wx.Panel.__init__(self, parent, id=id, **kwargs)
        self.figure = mpl.figure.Figure(dpi=dpi)
        #self.figure.gca().axis('off')
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.toolbar = NavigationToolbar(self.canvas)
        self.toolbar.Realize()
        self.identificador=0
        self.tipo=''
        self.rutaImagen=''
        
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.canvas, 1, wx.EXPAND)
        #sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)
        self.SetSizer(sizer)
        self.Fit()


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1366, 741))
        self.notebookImagenes = aui.AuiNotebook(self, wx.ID_ANY)
        
        self.paginas=[]
        self.paginas.append(ImagenCuadernoMatplotlib(self.notebookImagenes))
        self.paginaActual=self.paginas[0]
        self.arayActual=[]
        self.araySinIrra=[]
        self.araySinLuz=[]
        
        self.configuracion={"BitCanal":16}
        
        
        self.arbolArchivos = wx.TreeCtrl(self, wx.ID_ANY,style=wx.TR_LINES_AT_ROOT)
        self.panelVariable = wx.Panel(self, wx.ID_ANY)
        self.calibraciones=[]
        self.numeroPags=0
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Guardar...", "")
        self.Bind(wx.EVT_MENU, self.guardar, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Abrir...", "")
        self.Bind(wx.EVT_MENU, self.abrir, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Cerrar", "")
        self.Bind(wx.EVT_MENU, self.cerrar, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Archivo")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Generar calibracion", "")
        self.Bind(wx.EVT_MENU, self.calibrarNueva, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Calibracion")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Generar mapa", "")
        self.Bind(wx.EVT_MENU, self.mapaNuevo, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Realizar comparacion", "")
        self.Bind(wx.EVT_MENU, self.compararMapas, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Mapas de dosis")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Promediador", "")
        self.Bind(wx.EVT_MENU, self.promediarImagenes, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Apilar", "")
        self.Bind(wx.EVT_MENU, self.apilarImagenes, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Filtrar", "")
        self.Bind(wx.EVT_MENU, self.filtrarImagenes, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Configuracion", "")
        self.Bind(wx.EVT_MENU, self.cambiarConfiguracion, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Herramientas")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.FilmQADog_statusbar = self.CreateStatusBar(1, wx.STB_DEFAULT_STYLE)
        
        self.Bind(aui.EVT_AUINOTEBOOK_PAGE_CHANGED,self.cambioPagina,self.notebookImagenes)

        self.__set_properties()
        self.__do_layout()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("FilmQADog")
        self.FilmQADog_statusbar.SetStatusWidths([-1])
        
        self.raiz=self.arbolArchivos.AddRoot("FilmQADog")
        ident=self.arbolArchivos.AppendItem(self.raiz,"Bienvenido")
        self.arbolArchivos.ExpandAll()

        # statusbar fields
        FilmQADog_statusbar_fields = ["FilmQADog_statusbar"]
        for i in range(len(FilmQADog_statusbar_fields)):
            self.FilmQADog_statusbar.SetStatusText(FilmQADog_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.notebookImagenes, 2, wx.EXPAND, 0)
        self.sizer_2.Add(self.arbolArchivos, 1, wx.EXPAND, 0)
        self.sizerPanel=self.sizer_2.Add(self.panelVariable, 1, wx.EXPAND, 0)
        sizer_1.Add(self.sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        
        
        self.notebookImagenes.AddPage(self.paginas[0], "Bienvenido")
        figInicial=self.paginas[0].figure
        a1=figInicial.gca()
        im = tiff.imread('filmQAPerro.tif')
        self.arayActual=im
        a1.imshow(im)
        self.Layout()
        # end wxGlade

    def calibrarNueva(self, event):  # wxGlade: MyFrame.<event_handler>
        dialogoCalibracion=DialogoCalibracion(self)
        dialogoCalibracion.ShowModal()
        if dialogoCalibracion.resultado[0]!='cancelar':
            print(dialogoCalibracion.resultado)
            calibracionActual=Calibracion([],[],[])
            rez=self.arbolArchivos.AppendItem(self.raiz,"Calibracion "+str(len(self.calibraciones)+1))
            for nombreImagen in dialogoCalibracion.resultado[0]:
                
                self.paginas.append(ImagenCuadernoMatplotlib(self.notebookImagenes))
                self.notebookImagenes.AddPage(self.paginas[-1], "Calibracion "+str(len(self.calibraciones)+1))
                self.numeroPags=self.numeroPags+1
                self.paginas[-1].identificador=self.numeroPags
                self.paginas[-1].tipo='cali'
                self.paginas[-1].rutaImagen=nombreImagen
                nuem=self.notebookImagenes.GetPageCount()-1
                self.notebookImagenes.SetSelection(nuem)
                figActual=self.paginas[-1].figure
                self.paginaActual=self.paginas[-1].figure
                a1=figActual.gca()
                self.arayActual=tiff.imread(nombreImagen)
                escalado=(self.arayActual/2**self.configuracion["BitCanal"])*255
                a1.imshow(escalado.astype(int)) 
                calibracionActual.panelesMatplot.append(self.paginas[-1])
                calibracionActual.nombresArchivos.append(nombreImagen)
                self.arbolArchivos.AppendItem(rez,"Imagen "+str(len(calibracionActual.nombresArchivos)))
                
                
            dosisReal=leerDosis(dialogoCalibracion.resultado[1])
            self.araySinIrra=0*self.arayActual
            self.araySinLuz=0*self.arayActual

            if(dialogoCalibracion.resultado[6]):
                dialogoBackground=DialogoBackground(self)
                dialogoBackground.ShowModal()
                if dialogoBackground.resultado[0]!='cancelar' and dialogoBackground.resultado[0]!='':
                    self.araySinIrra=tiff.imread(dialogoBackground.resultado[0])
                    if(dialogoBackground.resultado[1]!=''):
                       self.araySinLuz=tiff.imread(dialogoBackground.resultado[1])
                
            if(dialogoCalibracion.resultado[4]):
                aray=wiener(aray,(40, 40))
                araySinIrra=wiener(araySinIrra,(40, 40))
                araySinLuz=wiener(araySinLuz,(40, 40))
            
            self.panelVariable=PanelSeleccionDosis(self,dosis=dosisReal,canal=dialogoCalibracion.resultado[2],curva=dialogoCalibracion.resultado[3],lateral=dialogoCalibracion.resultado[5])
            calibracionActual.panelDosis=self.panelVariable
            calibracionActual.fondoCero=self.araySinIrra
            calibracionActual.fondoNegro=self.araySinLuz
            self.calibraciones.append(calibracionActual)
            self.sizer_2.Remove(1)
            self.sizer_2.Add(self.panelVariable, 1, wx.EXPAND, 0)
            
            
            self.Layout()
        event.Skip()

    def abrir(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'abrir' not implemented!")
        event.Skip()

    def cerrar(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'cerrar' not implemented!")
        event.Skip()

    def guardar(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'calibrar' not implemented!")
        event.Skip()

    def mapaNuevo(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'mapaNuevo' not implemented!")
        event.Skip()

    def compararMapas(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'compararMapas' not implemented!")
        event.Skip()

    def promediarImagenes(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'promediarImagenes' not implemented!")
        event.Skip()

    def apilarImagenes(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'apilarImagenes' not implemented!")
        event.Skip()

    def filtrarImagenes(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'filtrarImagenes' not implemented!")
        event.Skip()

    def cambiarConfiguracion(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'cambiarConfiguracion' not implemented!")
        event.Skip()
    def cambioPagina(self,event):
        print('cambioPagina')
        pestana=self.notebookImagenes.GetCurrentPage()
        if pestana.tipo=='cali':
            for cals in self.calibraciones:
                for fisa in cals.panelesMatplot:
                    if fisa.identificador==pestana.identificador:
                        self.arayActual=tiff.imread(fisa.rutaImagen)
                        self.araySinIrra=cals.fondoCero
                        self.araySinLuz=cals.fondoNegro
                        self.paginaActual=fisa.figure
                        self.panelVariable=cals.panelDosis
                        print(self.panelVariable.R)
                        break
        self.panelVariable.repintar()
        self.panelVariable.grid_1.ForceRefresh()                
        self.sizer_2.Remove(1)
        self.sizer_2.Add(self.panelVariable, 1, wx.EXPAND, 0)
        self.Layout()
                        
        event.Skip()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.FilmQADog = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.FilmQADog)
        self.FilmQADog.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
