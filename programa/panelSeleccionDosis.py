#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Mon Nov  9 23:14:10 2020
#

import wx
import wx.grid
import numpy as np
from claseCalibracion import *
import matplotlib.pyplot as plt

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PanelSeleccionDosis(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        print(kwds)
        self.dosis=kwds["dosis"]
        self.tipoCanal=kwds["canal"]
        self.tipoCurva=kwds["curva"]
        del kwds["dosis"]
        del kwds["canal"]
        del kwds["curva"]
        #kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER 
        self.parent=args[0]
        super(PanelSeleccionDosis, self).__init__(self.parent)
        self.button_3 = wx.Button(self, wx.ID_ANY, "Nueva ROI")
        self.button_4 = wx.Button(self, wx.ID_ANY, "Nueva Dosis")
        self.button_5 = wx.Button(self, wx.ID_ANY, "Nueva medida")
        self.button_6 = wx.Button(self, wx.ID_ANY, "Calibrar")
        self.grid_1 = wx.grid.Grid(self, wx.ID_ANY, size=(1, 1))
        self.grid_1.SetDefaultCellFitMode(wx.grid.GridFitMode.Ellipsize())
        self.Bind(wx.grid.EVT_GRID_SELECT_CELL, self.onSelectCell, self.grid_1)
        self.parent=args[0]
        self.filaActual=0
        self.colActual=0
        
        self.R=[[None]*len(self.dosis)]
        self.G=[[None]*len(self.dosis)]
        self.B=[[None]*len(self.dosis)]
        
        self.Rstd=[[None]*len(self.dosis)]
        self.Gstd=[[None]*len(self.dosis)]
        self.Bstd=[[None]*len(self.dosis)]
        
        self.RCero=[[None]*len(self.dosis)]
        self.GCero=[[None]*len(self.dosis)]
        self.BCero=[[None]*len(self.dosis)]
        
        self.RCerostd=[[None]*len(self.dosis)]
        self.GCerostd=[[None]*len(self.dosis)]
        self.BCerostd=[[None]*len(self.dosis)]
        
        
        self.Rtotal=[]
        self.Gtotal=[]
        self.Btotal=[]
        self.RCeroTotal=[]
        self.GCeroTotal=[]
        self.BCeroTotal=[]
        self.Rtotalstd=[]
        self.Gtotalstd=[]
        self.Btotalstd=[]
        self.RCeroTotalstd=[]
        self.GCeroTotalstd=[]
        self.BCeroTotalstd=[]
        
        


        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.nuevaRoi, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.NuevaDosis, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.NuevaMedida, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.GenerarCalibracion, self.button_6)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        #self.SetTitle("Seleccion de ROIs")
        n=len(self.dosis)
        self.grid_1.CreateGrid(n, 2)
        self.grid_1.SetColLabelValue(0, "Dosis")
        self.grid_1.SetColLabelValue(1, "Medida 1")
        for i in range(n):
            self.grid_1.SetCellValue(i,0,str(self.dosis[i]))
        # end wxGlade
        
    def repintar(self):
        n=len(self.dosis)
        for i in range(n):
            self.grid_1.SetCellValue(i,0,str(self.dosis[i]))
        for i in range(1,len(self.R)+1):
            for k in range(n):
                if self.R[i-1][k]!=None:
                    self.grid_1.SetCellValue(k,i,"{:.3f}".format(self.R[i-1][k])+';'+"{:.3f}".format(self.G[i-1][k])+';'+"{:.3f}".format(self.B[i-1][k]))
                else:
                    self.grid_1.SetCellValue(k,i,"")

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.button_3, 1, wx.EXPAND, 0)
        sizer_3.Add(self.button_4, 1, wx.EXPAND, 0)
        sizer_3.Add(self.button_5, 1, wx.EXPAND, 0)
        sizer_3.Add(self.button_6, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add(self.grid_1, 2, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade
        
    def onSelectCell(self,event):
        self.filaActual=event.GetRow()
        self.colActual=event.GetCol()
        event.Skip()
        

    def nuevaRoi(self, event):  # wxGlade: MyDialog.<event_handler>
        k=self.parent.paginaActual.rectangleGin2()
        x1=k[0][0]
        y1=k[0][1]
        x2=k[1][0]
        y2=k[1][1]
        prom=np.mean(self.parent.arayActual[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:],axis=(0,1))
        promCero=np.mean(self.parent.araySinIrra[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:],axis=(0,1))
        
        std=np.std(self.parent.arayActual[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:]/(2**self.parent.configuracion["BitCanal"]-1),axis=(0,1),ddof=1)
        stdCero=np.std(self.parent.araySinIrra[min(int(y1),int(y2)):max(int(y1),int(y2)),min(int(x1),int(x2)):max(int(x1),int(x2)),:]/(2**self.parent.configuracion["BitCanal"]-1),axis=(0,1),ddof=1)

        self.R[self.colActual-1][self.filaActual]=prom[0]/(2**self.parent.configuracion["BitCanal"]-1)
        self.G[self.colActual-1][self.filaActual]=prom[1]/(2**self.parent.configuracion["BitCanal"]-1)
        self.B[self.colActual-1][self.filaActual]=prom[2]/(2**self.parent.configuracion["BitCanal"]-1)
        
        self.Rstd[self.colActual-1][self.filaActual]=std[0]
        self.Gstd[self.colActual-1][self.filaActual]=std[1]
        self.Bstd[self.colActual-1][self.filaActual]=std[2]
        
        self.RCero[self.colActual-1][self.filaActual]=promCero[0]/(2**self.parent.configuracion["BitCanal"]-1)
        self.GCero[self.colActual-1][self.filaActual]=promCero[1]/(2**self.parent.configuracion["BitCanal"]-1)
        self.BCero[self.colActual-1][self.filaActual]=promCero[2]/(2**self.parent.configuracion["BitCanal"]-1)
        
        self.RCerostd[self.colActual-1][self.filaActual]=stdCero[0]
        self.GCerostd[self.colActual-1][self.filaActual]=stdCero[1]
        self.BCerostd[self.colActual-1][self.filaActual]=stdCero[2]
        
        self.grid_1.SetCellValue(self.filaActual,self.colActual,"{:.3f}".format(1-prom[0]/2**self.parent.configuracion["BitCanal"])+';'+"{:.3f}".format(1-prom[1]/2**self.parent.configuracion["BitCanal"])+';'+"{:.3f}".format(1-prom[2]/2**self.parent.configuracion["BitCanal"]))
        event.Skip()

    def NuevaDosis(self, event):  # wxGlade: MyDialog.<event_handler>
        self.grid_1.AppendRows()
        self.dosis.append(0)
        for i in range(len(self.R)):
            self.R[i].append(0)
            self.G[i].append(0)
            self.B[i].append(0)
            self.RCero[i].append(0)
            self.GCero[i].append(0)
            self.BCero[i].append(0)
            self.Rstd[i].append(0)
            self.Gstd[i].append(0)
            self.Bstd[i].append(0)
            self.RCerostd[i].append(0)
            self.GCerostd[i].append(0)
            self.BCerostd[i].append(0)
            
        self.grid_1.SetCellValue(self.grid_1.GetNumberRows()-1,0,'0')
        event.Skip()

    def NuevaMedida(self, event):  # wxGlade: MyDialog.<event_handler>
        self.grid_1.AppendCols()
        nom=self.grid_1.GetNumberCols()
        self.grid_1.SetColLabelValue(nom-1, "Medida "+str(nom-1))
        self.R.append([None]*len(self.dosis))
        self.G.append([None]*len(self.dosis))
        self.B.append([None]*len(self.dosis))
        self.RCero.append([None]*len(self.dosis))
        self.GCero.append([None]*len(self.dosis))
        self.BCero.append([None]*len(self.dosis))
        self.Rstd.append([None]*len(self.dosis))
        self.Gstd.append([None]*len(self.dosis))
        self.Bstd.append([None]*len(self.dosis))
        self.RCerostd.append([None]*len(self.dosis))
        self.GCerostd.append([None]*len(self.dosis))
        self.BCerostd.append([None]*len(self.dosis))
        event.Skip()

    def GenerarCalibracion(self, event):  
        
        self.RCero=np.array(self.RCero)
        self.GCero=np.array(self.GCero)
        self.BCero=np.array(self.BCero)
        
        self.R=np.array(self.R)
        self.G=np.array(self.G)
        self.B=np.array(self.B)
        
        self.Rstd=np.array(self.Rstd)
        self.Gstd=np.array(self.Gstd)
        self.Bstd=np.array(self.Bstd)
        
        self.RCerostd=np.array(self.RCerostd)
        self.GCerostd=np.array(self.GCerostd)
        self.BCerostd=np.array(self.BCerostd)
        
        
        if np.mean(self.RCero)<1e-5:
            self.RCero=self.RCero+np.mean(self.R,axis=0)[0]

        if np.mean(self.GCero)<1e-5:
            self.GCero=self.GCero+np.mean(self.G,axis=0)[0]

        if np.mean(self.BCero)<1e-5:
            self.BCero=self.BCero+np.mean(self.B,axis=0)[0]
        
        desvTotalR=np.sqrt((self.Rstd/self.R)*(self.Rstd/self.R)+(self.RCerostd/self.RCero)*(self.RCerostd/self.RCero))/(np.log(10))
        desvTotalG=np.sqrt((self.Gstd/self.G)*(self.Gstd/self.G)+(self.GCerostd/self.GCero)*(self.GCerostd/self.GCero))/(np.log(10))
        desvTotalB=np.sqrt((self.Bstd/self.B)*(self.Bstd/self.B)+(self.BCerostd/self.BCero)*(self.BCerostd/self.BCero))/(np.log(10))
        
        pesosR=(1.0/desvTotalR**2)/(np.sum((1.0/desvTotalR**2),axis=0))
        pesosG=(1.0/desvTotalG**2)/(np.sum((1.0/desvTotalG**2),axis=0))
        pesosB=(1.0/desvTotalB**2)/(np.sum((1.0/desvTotalB**2),axis=0))
        
        self.RTotal=np.mean(self.R,axis=0)
        self.GTotal=np.mean(self.G,axis=0)
        self.BTotal=np.mean(self.B,axis=0) 
           

            
        self.RCeroTotal=np.mean(self.RCero,axis=0)
        self.GCeroTotal=np.mean(self.GCero,axis=0)
        self.BCeroTotal=np.mean(self.BCero,axis=0)    
        
        netOdR=np.log10(self.RCero/self.R)
        netOdG=np.log10(self.GCero/self.G)
        netOdB=np.log10(self.BCero/self.B)
        
        netOdRTotal=np.average(netOdR,axis=0,weights=pesosR)
        netOdGTotal=np.average(netOdG,axis=0,weights=pesosG)
        netOdBTotal=np.average(netOdB,axis=0,weights=pesosB)
        
        desvRFinal=np.sqrt(len(self.R)/np.sum((1.0/desvTotalR**2),axis=0))
        desvGFinal=np.sqrt(len(self.G)/np.sum((1.0/desvTotalG**2),axis=0))
        desvBFinal=np.sqrt(len(self.B)/np.sum((1.0/desvTotalB**2),axis=0))

        
        for i in range(self.grid_1.GetNumberRows()):
            self.dosis[i]=float(self.grid_1.GetCellValue(i,0))
            
        np.save('dosisMulti.npy',self.dosis)
        np.save('RMultiTrans.npy',[np.mean(self.R,axis=0),self.RCeroTotal])
        np.save('GMultiTrans.npy',[np.mean(self.G,axis=0),self.GCeroTotal])
        np.save('BMultiTrans.npy',[np.mean(self.B,axis=0),self.BCeroTotal])
        np.save('IncerMulti.npy',[desvRFinal,desvGFinal,desvBFinal])
        
        fdlg = wx.FileDialog(self, "Guardar calibracion",wildcard="calibraciones (*.calibr)|*.calibr", style=wx.FD_SAVE)
        fdlg.SetFilename("calibracion-")
        nombreArchivo=''
        if fdlg.ShowModal() == wx.ID_OK:
                nombreArchivo = fdlg.GetPath() + ".calibr"
        calibr=CalibracionImagen(
        [netOdRTotal,self.RCeroTotal,self.RTotal],
        [netOdGTotal,self.GCeroTotal,self.GTotal],
        [netOdBTotal,self.BCeroTotal,self.BTotal],
        [[desvRFinal,desvGFinal,desvBFinal],[np.mean(self.Rstd,axis=0),np.mean(self.Gstd,axis=0),np.mean(self.Bstd,axis=0)],[np.mean(self.RCerostd,axis=0),np.mean(self.GCerostd,axis=0),np.mean(self.BCerostd,axis=0)]],
        self.dosis,
        self.tipoCanal,
        self.tipoCurva)
        calibr.generar_calibracion(nombreArchivo)
        self.Close()
        event.Skip()
        

# end of class MyDialog

class MyApp(wx.App):
    def OnInit(self):
        self.dialog = DialogoSeleccionDosis(None,[10,20], wx.ID_ANY, "")
        self.SetTopWindow(self.dialog)
        self.dialog.ShowModal()
        self.dialog.Destroy()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
